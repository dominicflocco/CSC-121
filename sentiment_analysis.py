"""
This program takes a group of Tweets associated with a search term and assigns
it a sentiment value based on the valence of each word in the tweet. 

Names: Dominic Flocco and Elizabeth Opp

Time Spent: 2 hours

"""



def analyze_tweets(string):
    """
    This is the main function retrieves tweets from twitter and accepts a
    parameter with a given search term.
    
    If the search term does not generate any results it will present an
    error message and return the value 0 using a try-ecept function. This
    function calls the other helper functions in this program.
    
    Parameters:
        string - search term as a string used to generate a list of tweets
        
    Returns:
        this function returns the sentiment score of the list of tweets compiled
        by determining the average valence of the tweets generated by the inputed
        search string
    """
    
    
    try: 
        return determine_valence(get_tweets(string), retrieve_valence())
    except IOError:
        print("An error occured.")
        return 0
    
def get_tweets(string):
    """
    This function imports a csc121 package used to return tweets and generates
    a list of these tweets.
    
    By using the get_tweets function the function accepts the imputed parameter
    and uses it to search Twitter and generates a list of 100 tweets with the given
    term. Afterwords, it calls the text of each tweet from the dictionary produced
    and adds it to a list called tweet_list.
    
    Parameters:
        string - search term as a string used to generate a list of tweets
        
    Returns:
        returns a list of tweet texts retrieved from twitter
        
    """
    
    from csc121.twitter import get_tweets, pretty_print

    tweets = get_tweets(string)
    tweet_info = tweets["statuses"]
    tweet_list = []
    
    for i in range(len(tweet_info)):
        tweet_list.append(tweet_info[i]["text"])
        
    return tweet_list
    
def retrieve_valence():
    """
    This function imports a file with the valence values of words in the English
    dictionary and creates a dictionary with the valence value of each word.
    
    The function opens the file "AFINN-11.txt", splits each line of the function
    and creates a dictionary titles 'valence' with the word and its respective
    valence score.
    
    Parameters:
        None
        
    Returns:
        returns the valence dictionary with each words valence score
        
    """
    
    valence = {}
    
    with open("AFINN-111.txt", "r") as input_file:
        for line in input_file:
            fields = line.split()
            valence[fields[0]] = fields[1]
    
    return valence
    
def determine_valence(tweet_list, valence):
    """
    This function accepts two arguments and generates the average valence score
    of the tweets associated with a given seach term, this is called the sentiment
    score.
    
    The function takes each word in the tweet, defined by a string separated by a space
    and and searches the valence dictionary. If the term is found it sums the valence score
    of each word and then sums the valence score of all the tweets in the generated list.
    It then averages the valence scores into a sentiment score for the given search term. If
    the word is not found in the dictionary and a KeyError is producced the function assigns
    a neutral valence score of 0. If no tweets are found with the given search term and the
    length of the tweet list is zero a Zero Division Error will occur and the sentiment score
    will be zero and an error message will be produced.
    
    Parameters:
        tweet_list - a list of tweet texts retrieved from twitter
        valence - the valence dictionary with each words valence score
        
    Returns:
        returns the sentiment score of the tweets generate by the search term. If no tweets are
        found with the given search term it returns zero
    
    """
    valence_score = 0
    
    for tweets in tweet_list:
        tweet = tweets.split()
        for word in tweet:
            word = word.lower()
            try:
                valence_score += int(valence[word])
            except KeyError:
                valence_score += 0
    try: 
        sentiment_score = valence_score / len(tweet_list)
        return sentiment_score
    except ZeroDivisionError:
        print("An error occured.")
        return 0 
    
            
    
    